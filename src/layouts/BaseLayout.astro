---
// src/layouts/BaseLayout.astro
import CommandPalette from '../components/CommandPalette.svelte';
import SearchTrigger from '../components/SearchTrigger.svelte';
import EmailModal from '../components/EmailModal.svelte';
import { getCollection } from 'astro:content';
import ThemeToggle from '../components/ThemeToggle.svelte';
import '../styles/global.css';
import 'katex/dist/katex.min.css';

// Fetch ALL content at build time
const writing = await getCollection('writing');
const talks = await getCollection('talks');
const teaching = await getCollection('teaching');

// Format it into a simple structure for the command palette
const allPages = [
  ...writing.map(item => ({ title: item.data.title, url: `/writing/${item.slug}/` })),
  ...talks.map(item => ({ title: item.data.title, url: `/talks/${item.slug}/` })),
  ...teaching.map(item => ({ title: item.data.title, url: `/teaching/${item.slug}/` })),
];

interface ContextualAction {
  label: string;
  action: string;
  url?: string;
  slug?: string; // For openSource action
  contentType?: string; // For openSource action
}

interface Props {
  title: string;
  // Allow pages to pass extra actions
  contextualActions?: ContextualAction[];
  zoteroMetadata?: Record<string, any>;
  jsonLd?: Record<string, any>;
}

const { title, contextualActions = [], zoteroMetadata, jsonLd } = Astro.props;

// Add 'Home' action as first item in navigation (except on home page)
const currentPageUrl = Astro.url.pathname;
const navigationActions = currentPageUrl !== '/' ? [
  { label: 'Home', action: 'openUrl', url: '/' }
] : [];
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" href="/favicon.ico" />
    <title>{title}</title>
    
    <!-- Zotero metadata for citation detection -->
    {zoteroMetadata && (
      <>
        {zoteroMetadata.citation_title && <meta name="citation_title" content={zoteroMetadata.citation_title} />}
        {zoteroMetadata.citation_author?.map((author: string) => (
          <meta name="citation_author" content={author} />
        ))}
        {zoteroMetadata.citation_editor?.map((editor: string) => (
          <meta name="citation_editor" content={editor} />
        ))}
        {zoteroMetadata.citation_publication_date && <meta name="citation_publication_date" content={zoteroMetadata.citation_publication_date} />}
        {zoteroMetadata.citation_journal_title && <meta name="citation_journal_title" content={zoteroMetadata.citation_journal_title} />}
        {zoteroMetadata.citation_book_title && <meta name="citation_book_title" content={zoteroMetadata.citation_book_title} />}
        {zoteroMetadata.citation_volume && <meta name="citation_volume" content={zoteroMetadata.citation_volume} />}
        {zoteroMetadata.citation_issue && <meta name="citation_issue" content={zoteroMetadata.citation_issue} />}
        {zoteroMetadata.citation_firstpage && <meta name="citation_firstpage" content={zoteroMetadata.citation_firstpage} />}
        {zoteroMetadata.citation_lastpage && <meta name="citation_lastpage" content={zoteroMetadata.citation_lastpage} />}
        {zoteroMetadata.citation_doi && <meta name="citation_doi" content={zoteroMetadata.citation_doi} />}
        {zoteroMetadata.citation_pdf_url && <meta name="citation_pdf_url" content={Astro.url.origin + zoteroMetadata.citation_pdf_url} />}
      </>
    )}
    
    <!-- JSON-LD structured data -->
    {jsonLd && (
      <script type="application/ld+json" set:html={JSON.stringify(jsonLd, null, 2)}></script>
    )}
    <script is:inline>
      // This script is executed as-is, before the page is rendered.
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();

      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>
  </head>
  <body class="bg-white dark:bg-slate-900 text-slate-800 dark:text-slate-200 min-h-screen flex flex-col">
    <header class="border-b border-slate-200 dark:border-slate-800 bg-white/95 dark:bg-slate-900/95 backdrop-blur supports-[backdrop-filter]:bg-white/60 dark:supports-[backdrop-filter]:bg-slate-900/60">
      <div class="container mx-auto max-w-6xl px-4 py-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="flex items-center">
              <a href="/" class="text-xl font-semibold text-slate-800 dark:text-slate-200 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                <!-- <svg xmlns="http://www.w3.org/2000/svg" class="h-6 pb-1 inline" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
                </svg> -->
                Butterfill
              </a>
              <EmailModal client:load />
            </div>
          </div>
          <div class="flex items-center space-x-4">
            <SearchTrigger client:load />
            <nav class="flex items-center space-x-6">
              <a href="/writing/" class="text-sm font-medium text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 transition-colors">
                Writing
              </a>
              <a href="/talks/" class="text-sm font-medium text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 transition-colors">
                Talks
              </a>
              <a href="/teaching/" class="text-sm font-medium text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 transition-colors">
                Teaching
              </a>
              <span> </span>
              <ThemeToggle client:load />
            </nav>
          </div>
        </div>
      </div>
    </header>
    <main class="flex-1">
      <slot /> <!-- Page content will be injected here -->
    </main>
    <footer class="border-t border-slate-200 dark:border-slate-800 bg-slate-100/50 dark:bg-slate-800/50 py-6 text-center text-sm text-slate-500 dark:text-slate-400">
      <div class="container mx-auto max-w-6xl px-4">
        <p>&copy; {new Date().getFullYear()} Stephen Butterfill. All rights reserved.</p>
      </div>
    </footer>
    <CommandPalette allPages={allPages} contextualActions={contextualActions} navigationActions={navigationActions} client:load />
  </body>
</html>
