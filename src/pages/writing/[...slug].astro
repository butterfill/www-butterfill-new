---
// src/pages/writing/[...slug].astro
import { getCollection } from 'astro:content';
import PageLayout from '../../layouts/PageLayout.astro';
import fs from 'fs';
import path from 'path';

// This function runs at build time to find all publications
// and tell Astro to create a page for each one.
export async function getStaticPaths() {
  const writingEntries = await getCollection('writing');
  return writingEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

import CopyForChat from '../../components/CopyForChat.svelte';
import CiteButton from '../../components/CiteButton.svelte';
import EditSourceButton from '../../components/EditSourceButton.svelte';
import CitationDisplay from '../../components/CitationDisplay.svelte';
import TableOfContents from '../../components/TableOfContents.svelte';
import FootnoteManager from '../../components/FootnoteManager.svelte';
import FontSettings from '../../components/FontSettings.svelte';
import { parseBibtex, generatePlainText } from '../../lib/citation-utils';

const { entry } = Astro.props;
const { Content } = await entry.render(); // This gets the Markdown content

// Step 2 & 3: Check for markdown file and read content
const markdownFilePath = path.join(process.cwd(), 'public', 'md', `${entry.slug}.md`);
let hasMarkdownFile = fs.existsSync(markdownFilePath);
let markdownContent = '';

if (hasMarkdownFile) {
  try {
    markdownContent = fs.readFileSync(markdownFilePath, 'utf-8');
  } catch (error) {
    console.error(`Error reading markdown file for ${entry.slug}:`, error);
    hasMarkdownFile = false; // Treat as if file doesn't exist
  }
}

const bibtexData = entry.data.bibtex;

// Step 4: Generate formatted citation
let formattedCitation = '';
if (hasMarkdownFile && bibtexData) {
  const parsed = parseBibtex(bibtexData);
  formattedCitation = generatePlainText(parsed).replace(/\*/g, ''); // Remove markdown formatting
}

// Format the content specifically for the clipboard
// Use the raw markdown body instead of the rendered Content component
const textForLLM = `
Title: ${entry.data.title}
Authors: ${entry.data.authors}
Year: ${entry.data.year}

---

${entry.body}
`.trim();

// Step 5: Create enhanced content format for markdown files
let enhancedTextForLLM = '';
if (hasMarkdownFile) {
  enhancedTextForLLM = `<instructions>
You are a professor of philosophy who will be asked questions about the <article> below.
Please read this carefully and ensure that your answers are based on the article only.
Give exact, word-for-word quotes from the article to support your points.

If your tools include web search, you may find it useful to consult \`https://butterfill.com/llms.txt\` for information about related work. If you do consult related works, please be sure to correctly identify each source you rely on in answering the user's questions.
</instructions>

<article>
Title: ${entry.data.title}
Authors: ${entry.data.authors}
Year: ${entry.data.year}

<citation>
${formattedCitation}
</citation>

<full-text>
${markdownContent}
</full-text>
</article>`;
}


const pdfUrl = entry.data.pdfUrl;

// Define actions specific to this page
const pageActions = [];

// Add PDF download as first item if available
if (pdfUrl) {
  pageActions.push({
    label: 'Download PDF',
    action: 'openUrl',
    url: pdfUrl
  });
}

// Step 7: Add Copy for Chat only if markdown file exists
if (hasMarkdownFile) {
  pageActions.push({
    label: 'Copy for Chat',
    action: 'copyToClipboard',
    text: enhancedTextForLLM
  });
}

// Add citation actions if bibtex is available
if (bibtexData) {
  pageActions.push(
    {
      label: 'Copy BibTeX Citation',
      action: 'copyCitation',
      format: 'bibtex',
      bibtex: bibtexData
    },
    {
      label: 'Copy RIS Citation',
      action: 'copyCitation',
      format: 'ris',
      bibtex: bibtexData
    },
    {
      label: 'Copy Plain Text Citation',
      action: 'copyCitation',
      format: 'plaintext',
      bibtex: bibtexData
    },
    {
      label: 'Download BibTeX Citation',
      action: 'downloadCitation',
      format: 'bibtex',
      bibtex: bibtexData
    },
    {
      label: 'Download RIS Citation',
      action: 'downloadCitation',
      format: 'ris',
      bibtex: bibtexData
    },
    {
      label: 'Download Plain Text Citation',
      action: 'downloadCitation',
      format: 'plaintext',
      bibtex: bibtexData
    }
  );
}

---
<PageLayout title={entry.data.title} contextualActions={pageActions}>
  <div class="flex justify-end mb-4 space-x-2">
    {hasMarkdownFile && (
      <CopyForChat contentToCopy={enhancedTextForLLM} client:load />
    )}
    {import.meta.env.DEV && (
      <span> </span> 
      <EditSourceButton slug={entry.slug} contentType="writing" client:load />
    )}
    {bibtexData && (
      <span> </span> 
      <CiteButton bibtex={bibtexData} client:load />
    )}
    {pdfUrl && (
      <a 
        href={pdfUrl} 
        target="_blank" 
        rel="noopener noreferrer"
        class="inline-flex items-center justify-center w-auto h-8 rounded-full bg-slate-100 hover:bg-blue-100 dark:bg-slate-700 dark:hover:bg-blue-900/50 transition-colors px-3"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
        </svg>
        <span class="text-xs font-medium text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400">
          PDF
        </span>
      </a>
    )}
  </div>
  <CitationDisplay 
    bibtex={bibtexData}
    authors={entry.data.authors}
    year={entry.data.year}
    journal={entry.data.journal}
    doi={entry.data.doi}
    client:load 
  />
  
  <!-- Main content with footnote manager -->
  <div style="position: relative;">
    <Content /> <!-- This renders the main body of the Markdown file -->
    <FootnoteManager client:load />
  </div>
  
  <!-- Font Settings Modal -->
  <FontSettings client:load />
  
  <!-- Table of Contents Modal -->
  <TableOfContents client:load />
</PageLayout>