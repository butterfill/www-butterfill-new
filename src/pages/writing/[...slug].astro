---
// src/pages/writing/[...slug].astro
import { getCollection } from 'astro:content';
import PageLayout from '../../layouts/PageLayout.astro';

// This function runs at build time to find all publications
// and tell Astro to create a page for each one.
export async function getStaticPaths() {
  const writingEntries = await getCollection('writing');
  return writingEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

import CopyForChat from '../../components/CopyForChat.svelte';
import CiteButton from '../../components/CiteButton.svelte';

const { entry } = Astro.props;
const { Content } = await entry.render(); // This gets the Markdown content

// Format the content specifically for the clipboard
// Use the raw markdown body instead of the rendered Content component
const textForLLM = `
Title: ${entry.data.title}
Authors: ${entry.data.authors}
Year: ${entry.data.year}

---

${entry.body}
`.trim();


const pdfUrl = entry.data.pdfUrl;
const bibtexData = entry.data.bibtex;

// Define actions specific to this page
const pageActions = [];

// Add PDF download as first item if available
if (pdfUrl) {
  pageActions.push({
    label: 'Download PDF',
    action: 'openUrl',
    url: pdfUrl
  });
}

// Add Copy for Chat as second item
pageActions.push({
  label: 'Copy for Chat',
  action: 'copyToClipboard',
  text: textForLLM
});

// Add citation actions if bibtex is available
if (bibtexData) {
  pageActions.push(
    {
      label: 'Copy BibTeX Citation',
      action: 'copyCitation',
      format: 'bibtex',
      bibtex: bibtexData
    },
    {
      label: 'Copy RIS Citation',
      action: 'copyCitation',
      format: 'ris',
      bibtex: bibtexData
    },
    {
      label: 'Copy Plain Text Citation',
      action: 'copyCitation',
      format: 'plaintext',
      bibtex: bibtexData
    },
    {
      label: 'Download BibTeX Citation',
      action: 'downloadCitation',
      format: 'bibtex',
      bibtex: bibtexData
    },
    {
      label: 'Download RIS Citation',
      action: 'downloadCitation',
      format: 'ris',
      bibtex: bibtexData
    },
    {
      label: 'Download Plain Text Citation',
      action: 'downloadCitation',
      format: 'plaintext',
      bibtex: bibtexData
    }
  );
}

---
<PageLayout title={entry.data.title} contextualActions={pageActions}>
  <div class="flex justify-end mb-4 space-x-2">
    <CopyForChat contentToCopy={textForLLM} client:load />
    {bibtexData && (
      <span> </span>
      <CiteButton bibtex={bibtexData} client:load />
    )}
    {pdfUrl && (
      <a 
        href={pdfUrl} 
        target="_blank" 
        rel="noopener noreferrer"
        class="inline-flex items-center justify-center w-auto h-8 rounded-full bg-slate-100 hover:bg-blue-100 dark:bg-slate-700 dark:hover:bg-blue-900/50 transition-colors px-3"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
        </svg>
        <span class="text-xs font-medium text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400">
          PDF
        </span>
      </a>
    )}
  </div>
  <div class="mb-4 text-sm text-slate-600 dark:text-slate-400">
    <p><strong>Authors:</strong> {entry.data.authors}</p>
    <p><strong>Published:</strong> {entry.data.year}</p>
    {entry.data.journal && <p><strong>Journal:</strong> {entry.data.journal}</p>}
    {entry.data.doi && (
      <p>
        <strong>DOI:</strong> 
        <a 
          href={`http://dx.doi.org/${entry.data.doi}`} 
          target="_blank" 
          class="ml-2 text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400 transition-colors"
        >
          {entry.data.doi}
          <svg xmlns="http://www.w3.org/2000/svg" class="inline-block w-3 h-3 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
        </a>
      </p>
    )}
  </div>
  <Content /> <!-- This renders the main body of the Markdown file -->
</PageLayout>