---
// src/pages/talks/[...slug].astro
import { getCollection } from 'astro:content';
import PageLayout from '../../layouts/PageLayout.astro';
import Slides from '../../components/Slides.astro'; // Import the new component
import { generateJsonLd } from '../../lib/jsonld-utils';

// This function runs at build time to find all talks
// and tell Astro to create a page for each one.
export async function getStaticPaths() {
  const talkEntries = await getCollection('talks');
  return talkEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

import CopyForChat from '../../components/CopyForChat.svelte';
import EditSourceButton from '../../components/EditSourceButton.svelte';

const { entry } = Astro.props;
const { Content } = await entry.render();

// Generate JSON-LD structured data
const jsonLd = generateJsonLd(entry.data, 'talks', entry.slug);

// Format the content specifically for the clipboard
// Use the raw markdown body instead of the rendered Content component
const textForLLM = `
Title: ${entry.data.title}
Authors: ${entry.data.authors}
Year: ${entry.data.pubDate ? new Date(entry.data.pubDate).getFullYear() : 'Unknown'}

---

${entry.body}
`.trim();
// Define actions specific to this page
const pageActions = [];

// Add open source action in development mode
if (import.meta.env.DEV) {
  pageActions.push({
    label: 'Edit Source',
    action: 'openSource',
    slug: entry.slug,
    contentType: 'talks'
  });
}

// Add Copy for Chat action
pageActions.push({
  label: 'Copy for Chat',
  action: 'copyToClipboard',
  text: textForLLM
});

// Add Handout download if available
if (entry.data.handoutUrl) {
  pageActions.push({
    label: 'Download Handout',
    action: 'openUrl',
    url: entry.data.handoutUrl
  });
}

// Add Slides download if available
if (entry.data.slidesUrl) {
  pageActions.push({
    label: 'Download Slides',
    action: 'openUrl',
    url: entry.data.slidesUrl
  });
}
---
<PageLayout title={entry.data.title} contextualActions={pageActions} jsonLd={jsonLd}>
  <div class="flex justify-end mb-4 space-x-2">
    <CopyForChat contentToCopy={textForLLM} client:load />
    {import.meta.env.DEV && (
      <span> </span> 
      <EditSourceButton slug={entry.slug} contentType="talks" client:load />
    )}
    {entry.data.handoutUrl && (
      <a 
        href={entry.data.handoutUrl} 
        target="_blank" 
        rel="noopener noreferrer"
        class="inline-flex items-center justify-center w-auto h-8 rounded-full bg-slate-100 hover:bg-purple-100 dark:bg-slate-700 dark:hover:bg-purple-900/50 transition-colors px-3"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-600 hover:text-purple-600 dark:text-slate-400 dark:hover:text-purple-400 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" />
        </svg>
        <span class="text-xs font-medium text-slate-600 hover:text-purple-600 dark:text-slate-400 dark:hover:text-purple-400">
          Handout
        </span>
      </a>
    )}
    {entry.data.slidesUrl && (
      <a 
        href={entry.data.slidesUrl} 
        target="_blank" 
        rel="noopener noreferrer"
        class="inline-flex items-center justify-center w-auto h-8 rounded-full bg-slate-100 hover:bg-green-100 dark:bg-slate-700 dark:hover:bg-green-900/50 transition-colors px-3"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-slate-600 hover:text-green-600 dark:text-slate-400 dark:hover:text-green-400 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path d="M7 4a2 2 0 012-2h6a2 2 0 012 2v2h4a2 2 0 012 2v6a2 2 0 01-2 2H3a2 2 0 01-2-2V8a2 2 0 012-2h4V4z" />
        </svg>
        <span class="text-xs font-medium text-slate-600 hover:text-green-600 dark:text-slate-400 dark:hover:text-green-400">
          Slides
        </span>
      </a>
    )}
  </div>
  
  <div class="mb-4 text-sm text-slate-600 dark:text-slate-400">
    {entry.data.externalUrl && (
      <div class="mb-3 rounded-md border border-blue-200 bg-blue-50 p-3 dark:border-blue-900 dark:bg-blue-950/50">
        This talk is hosted externally. View it at
        <a 
          href={entry.data.externalUrl} 
          target="_blank" 
          rel="noopener noreferrer"
          class="ml-1 text-blue-700 hover:text-blue-600 underline dark:text-blue-300 dark:hover:text-blue-200"
        >
          handouts.butterfill.com
          <svg xmlns="http://www.w3.org/2000/svg" class="inline-block w-3 h-3 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
        </a>.
      </div>
    )}
    <p class="mb-2">
      <span>by</span>
      <span class="font-medium">{entry.data.authors}</span>
      <!-- bad formatting of next line is to avoid an extra space between the closing bracket and the comma -->
      <span>({new Date(entry.data.pubDate).toLocaleDateString()})</span>{entry.data.event && (<><span>, </span>
          <span class="italic">{entry.data.event}</span>
        </>
      )}
      {entry.data.address && (
        <>
          <span> at </span>
          <span>{entry.data.address}</span>
        </>
      )}
    </p>
    {entry.data.doi && (
      <p>
        <strong>DOI:</strong> 
        <a 
          href={`http://dx.doi.org/${entry.data.doi}`} 
          target="_blank" 
          class="ml-2 text-slate-600 hover:text-blue-600 dark:text-slate-400 dark:hover:text-blue-400 transition-colors"
        >
          {entry.data.doi}
          <svg xmlns="http://www.w3.org/2000/svg" class="inline-block w-3 h-3 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
          </svg>
        </a>
      </p>
    )}
  </div>

  <!-- Conditionally render the Slides component -->
  {entry.data.slideImages && entry.data.slideImages.length > 0 && (
    <div class="my-8">
      <h2 class="text-2xl font-bold mb-4">Slides</h2>
      <Slides images={entry.data.slideImages} />
    </div>
  )}

  <Content />
</PageLayout>
